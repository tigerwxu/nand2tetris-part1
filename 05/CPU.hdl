// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // See diagram in chapter 5, unit 5.3, and chapter 4 hack instructions
    // A instructions have format 0b0vvv vvvv vvvv vvvv
    // C instructions have format 0b1__a cccc ccdd djjj
    //                                   1234 5612 3123

    // Instruction Mux and A Register
    // Prepare either instruction or ALUOut for loading into A register depending on A or C instruction
    // Opcode instruction[15] (msb) is 0 for A instruction, 1 for C instruction
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=aMuxOut);
    // Assert load only if A instruction, or C instruction with instruction[5]=d1=1
    And(a=instruction[15], b=instruction[5], out=isCInstructionWithd1);
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=isCInstructionWithd1, out=assertLoadA);
    ARegister(in=aMuxOut, load=assertLoadA, out=ARegOut, out[0..14]=addressM);

    // D register
    // Assert load only if C instruction with instruction[4]=d2=1
    And(a=instruction[15], b=instruction[4], out=assertLoadD);
    DRegister(in=ALUOut, load=assertLoadD, out=ALUIn0);

    // ALU Mux 
    // Select A or M based on 'a' bit in C instruction
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUIn1);

    // ALU (See chapter 2)
    // ALU control logic corresponds to instruction[6..11]=c6..c1
    ALU(x=ALUIn0, y=ALUIn1, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], 
        no=instruction[6], out=ALUOut, out=outM, zr=ALUzr, ng=ALUng);
    // Assert load M only if C instruction with instruction[3]=d3=1
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Program counter and jump logic
    // If j1 then jump if ALUOut < 0
    And(a=instruction[2], b=ALUng, out=j1);
    // If j2 then jump if ALUOut = 0
    And(a=instruction[1], b=ALUzr, out=j2);
    // If j3 then jump if ALUOut > 0
    Or(a=ALUzr, b=ALUng, out=ALUNotPositive);
    Not(in=ALUNotPositive, out=ALUPositive);
    And(a=instruction[0], b=ALUPositive, out=j3);
    // If (j1 || j2 || j3) && is C instruction then assert jump bit
    Or(a=j1, b=j2, out=j1ORj2);
    Or(a=j1ORj2, b=j3, out=j1ORj2ORj3);
    And(a=j1ORj2ORj3, b=instruction[15], out=jump);
    // Jump if jump=1 to addr pointed by A register
    PC(in=ARegOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}